{"version":3,"file":"bundle.umd.js","sources":["../src/batchHttpLink.ts"],"sourcesContent":["import {\n  ApolloLink,\n  Operation,\n  FetchResult,\n  Observable,\n  fromError,\n} from 'apollo-link';\nimport {\n  serializeFetchParameter,\n  selectURI,\n  parseAndCheckHttpResponse,\n  checkFetcher,\n  selectHttpOptionsAndBody,\n  createSignalIfSupported,\n  fallbackHttpConfig,\n  HttpOptions,\n} from 'apollo-link-http-common';\nimport { BatchLink } from 'apollo-link-batch';\n\nexport namespace BatchHttpLink {\n  export interface Options extends HttpOptions {\n    /**\n     * The maximum number of operations to include in one fetch.\n     *\n     * Defaults to 10.\n     */\n    batchMax?: number;\n\n    /**\n     * The interval at which to batch, in milliseconds.\n     *\n     * Defaults to 10.\n     */\n    batchInterval?: number;\n\n    /**\n     * Sets the key for an Operation, which specifies the batch an operation is included in\n     */\n    batchKey?: (operation: Operation) => string;\n  }\n}\n\n/**\n * Transforms Operation for into HTTP results.\n * context can include the headers property, which will be passed to the fetch function\n */\nexport class BatchHttpLink extends ApolloLink {\n  private batchInterval: number;\n  private batchMax: number;\n  private batcher: ApolloLink;\n\n  constructor(fetchParams?: BatchHttpLink.Options) {\n    super();\n\n    let {\n      uri = '/graphql',\n      // use default global fetch if nothing is passed in\n      fetch: fetcher,\n      includeExtensions,\n      batchInterval,\n      batchMax,\n      batchKey,\n      ...requestOptions\n    } = fetchParams || ({} as BatchHttpLink.Options);\n\n    // dev warnings to ensure fetch is present\n    checkFetcher(fetcher);\n\n    //fetcher is set here rather than the destructuring to ensure fetch is\n    //declared before referencing it. Reference in the destructuring would cause\n    //a ReferenceError\n    if (!fetcher) {\n      fetcher = fetch;\n    }\n\n    const linkConfig = {\n      http: { includeExtensions },\n      options: requestOptions.fetchOptions,\n      credentials: requestOptions.credentials,\n      headers: requestOptions.headers,\n    };\n\n    this.batchInterval = batchInterval || 10;\n    this.batchMax = batchMax || 10;\n\n    const batchHandler = (operations: Operation[]) => {\n      const chosenURI = selectURI(operations[0], uri);\n\n      const context = operations[0].getContext();\n\n      const clientAwarenessHeaders = {};\n      if (context.clientAwareness) {\n        const { name, version } = context.clientAwareness;\n        if (name) {\n          clientAwarenessHeaders['apollographql-client-name'] = name;\n        }\n        if (version) {\n          clientAwarenessHeaders['apollographql-client-version'] = version;\n        }\n      }\n\n      const contextConfig = {\n        http: context.http,\n        options: context.fetchOptions,\n        credentials: context.credentials,\n        headers: { ...clientAwarenessHeaders, ...context.headers },\n      };\n\n      //uses fallback, link, and then context to build options\n      const optsAndBody = operations.map(operation =>\n        selectHttpOptionsAndBody(\n          operation,\n          fallbackHttpConfig,\n          linkConfig,\n          contextConfig,\n        ),\n      );\n\n      const loadedBody = optsAndBody.map(({ body }) => body);\n      const options = optsAndBody[0].options;\n\n      // There's no spec for using GET with batches.\n      if (options.method === 'GET') {\n        return fromError<FetchResult[]>(\n          new Error('apollo-link-batch-http does not support GET requests'),\n        );\n      }\n\n      try {\n        (options as any).body = serializeFetchParameter(loadedBody, 'Payload');\n      } catch (parseError) {\n        return fromError<FetchResult[]>(parseError);\n      }\n\n      let controller;\n      if (!(options as any).signal) {\n        const { controller: _controller, signal } = createSignalIfSupported();\n        controller = _controller;\n        if (controller) (options as any).signal = signal;\n      }\n\n      return new Observable<FetchResult[]>(observer => {\n        fetcher(chosenURI, options)\n          .then(response => {\n            // Make the raw response available in the context.\n            operations.forEach(operation => operation.setContext({ response }));\n            return response;\n          })\n          .then(parseAndCheckHttpResponse(operations))\n          .then(result => {\n            // we have data and can send it to back up the link chain\n            observer.next(result);\n            observer.complete();\n            return result;\n          })\n          .catch(err => {\n            // fetch was cancelled so its already been cleaned up in the unsubscribe\n            if (err.name === 'AbortError') return;\n            // if it is a network error, BUT there is graphql result info\n            // fire the next observer before calling error\n            // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n            // to pass to UI\n            // this should only happen if we *also* have data as part of the response key per\n            // the spec\n            if (err.result && err.result.errors && err.result.data) {\n              // if we dont' call next, the UI can only show networkError because AC didn't\n              // get andy graphqlErrors\n              // this is graphql execution result info (i.e errors and possibly data)\n              // this is because there is no formal spec how errors should translate to\n              // http status codes. So an auth error (401) could have both data\n              // from a public field, errors from a private field, and a status of 401\n              // {\n              //  user { // this will have errors\n              //    firstName\n              //  }\n              //  products { // this is public so will have data\n              //    cost\n              //  }\n              // }\n              //\n              // the result of above *could* look like this:\n              // {\n              //   data: { products: [{ cost: \"$10\" }] },\n              //   errors: [{\n              //      message: 'your session has timed out',\n              //      path: []\n              //   }]\n              // }\n              // status code of above would be a 401\n              // in the UI you want to show data where you can, errors as data where you can\n              // and use correct http status codes\n              observer.next(err.result);\n            }\n\n            observer.error(err);\n          });\n\n        return () => {\n          // XXX support canceling this request\n          // https://developers.google.com/web/updates/2017/09/abortable-fetch\n          if (controller) controller.abort();\n        };\n      });\n    };\n\n    batchKey =\n      batchKey ||\n      ((operation: Operation) => {\n        const context = operation.getContext();\n\n        const contextConfig = {\n          http: context.http,\n          options: context.fetchOptions,\n          credentials: context.credentials,\n          headers: context.headers,\n        };\n\n        //may throw error if config not serializable\n        return selectURI(operation, uri) + JSON.stringify(contextConfig);\n      });\n\n    this.batcher = new BatchLink({\n      batchInterval: this.batchInterval,\n      batchMax: this.batchMax,\n      batchKey,\n      batchHandler,\n    });\n  }\n\n  public request(operation: Operation): Observable<FetchResult> | null {\n    return this.batcher.request(operation);\n  }\n}\n"],"names":["tslib_1.__extends","checkFetcher","selectURI","selectHttpOptionsAndBody","fallbackHttpConfig","fromError","serializeFetchParameter","Observable","parseAndCheckHttpResponse","BatchLink","ApolloLink"],"mappings":"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"}